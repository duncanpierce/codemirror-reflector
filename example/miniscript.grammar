// https://lezer.codemirror.net/docs/guide/

// These are the extra things we need to add for Reflector to work

@external prop scope from "../src/props"
@external prop definition from "../src/props"
@external prop use from "../src/props"

@top Program[scope] { declaration* }

GlobalVariableDefinition[definition] { identifier }

FunctionDeclaration[scope="definitions=FormalParameters,uses=FunctionBody"]
{ Function FunctionDefinition FormalParameters "{" FunctionBody "}" }

FunctionDefinition[definition] { identifier }

ParameterDefinition[definition] { identifier }

LocalVariableDefinition[definition] { identifier }

VariableUse[use] { identifier }

FunctionUse[use] { identifier }

// End of extra things for Reflector - everything below is ordinary grammar

@skip { space | Comment }

@tokens {
    space { $[ \t\n\r]+ }
    Comment { "#" ![\n]* }
    identifier { $[a-zA-Z]+ }
    Number { $[0-9]+ }
    String { '"' ![\n"] '"' }
}

@precedence {
    neg @left,
    mul @left,
    add @left,
    cmp @left
}

list<k> { "(" (k ("," k)*)? ")" }
Function { @specialize<identifier,"func"> }
Var { @specialize<identifier,"var"> }
Return { @specialize<identifier,"return"> }

declaration {
    FunctionDeclaration |
    (GlobalVariableDeclaration ";")
}

GlobalVariableDeclaration { Var GlobalVariableDefinition }
VariableDeclaration { Var LocalVariableDefinition }
FunctionBody { statement* }
statement { (VariableDeclaration | Assignment | FunctionCall | ReturnStatement) ";" }

FormalParameters { list<LocalVariableDefinition> }
ActualParameters { list<Expression> }
ReturnStatement { Return Expression }
Assignment { VariableUse "=" Expression }

Expression {
    Number |
    String |
    VariableUse |
    Unary |
    Binary |
    SubExpression |
    FunctionCall
}

Unary {
    !neg "-" Expression
}

Binary {
    Expression !mul "*" Expression |
    Expression !mul "/" Expression |
    Expression !add "+" Expression |
    Expression !add "-" Expression | 
    Expression !cmp ("<" | ">" | "=" | "<>" | "<=" | ">=") Expression
}

SubExpression { "(" Expression ")" }

FunctionCall { FunctionUse ActualParameters }
